<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Lauda!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    

        
    
    <section>
        <title>Junit teszt</title>        
        <para>
            Megoldás forrása:  <link xlink:href=" https://github.com/grestemayster/prog2/tree/master/Hallo%2C%20Lauda!/junit "> https://github.com/grestemayster/prog2/tree/master/Hallo%2C%20Lauda!/junit</link>               
        </para>
        <para>
            A <link xlink:href="https://progpater.blog.hu/2011/03/05/labormeres_otthon_avagy_hogyan_dolgozok_fel_egy_pedat">progprater</link>
            poszt kézzel számított mélységét és szórását dolgozd be egy Junit tesztbe (sztenderd védési feladat
            volt korábban).    
        </para>
        <para>
            A Junit egy egységteszt keretrendszer Java nyelvhez. Ezzel kódot tesztelő osztályokat írhatunk és futtatásával leellenőrízhetjük, hogy a programunk működése 
            a várt módon hajtódik-e végre. Ehhez előbb létre kell hoznunk egy új projektet az Eclipse szerkesztőben, majd a néhány fejezettel ezelőtti LZWBinFa.java 
            programunkat kell bemásolni. Ha ezzel megvagyunk, akkor létrehozhatunk egy JUnit tesztelőt úgy, hogy a projektunk gyökérkönyvtárra a jobb egérrel klikkelünk, 
            majd "new > JUnit Test Case" menüpontot válasszuk ki. Egy osztálynév megadása után klikkeljünk a finishre, majd gépekjük be a következő kódot:
        </para>
        <programlisting language="java"><![CDATA[ 
package Binfa;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
class LZWtest {
	LZWBinFa testBinfa = new LZWBinFa();
    
    @Test
    public void testOperator() {
    	String input = "01111001001001000111";    
        
    	for(char b: input.toCharArray()){
            testBinfa.operator(b);
        }
        
        assertEquals(4, testBinfa.getMelyseg());
        assertEquals(2.75, testBinfa.getAtlag(), 0.001);
        assertEquals(0.957427, testBinfa.getSzoras(), 0.000001);	
    }
}
            ]]>
        </programlisting>
        <para>
           Ebből nekünk a "@Test" az ami újdonság. Ezzel jelezzük a programunk számára, hogy tesztelő függvény következik. 
           Megadunk egy input-ot, jelen esetben a feladatban található számsort, amit <![CDATA[toCharArray()]]> segítségével egyenként egy tömbbe esszük az egyeseket és a nullákat. 
           Ezután elvégzi a számításokat az LWWBinFa.java programunkban ismert módon. Végül a kapott eredményeket az <![CDATA[assertEquals()]]> függvénnyel ellenőrízzük le. Ennek elsőparamétere 
           a számunkra várt eredmény, második paramétere a kapott eredmény és végül a harmadik paraméterként azt kell megadni, hogy lehet-e deltányi eltérés. 
        </para>
        <para>
            Ha ezzel megvagyunk, akkor elindíthatjuk a tesztelő programunkat úgy, hogy a jobb egérrel a következő menüpontokra klikkelünk: <![CDATA[Debug as > JUnit Test]]>. Ha zöld csík jelenik meg, akkor 
            mindent jól csináltunk és azt az eredményt kaptuk, amit kézzel is kiszámoltunk:  
        </para>
        <figure>
            <title>JUnit teszt</title>
            <mediaobject>
            <imageobject>
                <imagedata fileref="images/8_1.png" scale="40"/>
            </imageobject>
        </mediaobject>

        </figure>
    </section> 
    
    
    
     <section>
        <title>Android Játék</title>        
        <para>
            Írjunk egy egyszerű Androidos „játékot”! Építkezzünk például a 2. hét „Helló, Android!” feladatára!                
        </para>
        <para>
            Megoldás forrása:  <link xlink:href=" https://github.com/grestemayster/prog2/tree/master/Hallo%2C%20Lauda!/Android "> https://github.com/grestemayster/prog2/tree/master/Hallo%2C%20Lauda!/Android </link>               
        </para>
        <para>
            Ebben a feladatban egy Tic Tac Toe nevű játékot fogunk felépíteni, amely egy olyan kétszemélyes stratégiai játék, ahol egy 3x3 mezőből álló 
            táblára "X" vagy "O" jeleket teszünk. Az nyer, akinek sikerül egy vonalban 3 jelet elhelyeznie, vízszintes, függőleges vagy átlós irányba. 
        </para>
        <para>
            Mivel ez egy Androidos játk lesz, ezért célszerű letölteni az Android Studio-t. Kezdésként hozzunk létre egy új prpjektet, aminek adjunk egy nevet. 
            Én azAndroid 4.4-es verziót választottam ki, mivel úgy tűnik jelenleg ezzel a verzióban létrehozott appok az eszközök több, mint 90%-ában el fog futni. 
            Ezután az "Empty Activity"-t kell majd kiválasztanunk. Egy kis idő elteltével az azblakon 2 fület fogunk látni: <filename>activity_main.xml</filename> és a 
            <filename>MainActivity.java</filename>. Ezeket fogjuk majd szerkesztgetni. Először az alkalmazásunk külsejét fogjuk kódolni, amit az <filename>activity_main.xml</filename> fájlban 
            tehetünk meg:
        </para>
        <programlisting language="java"><![CDATA[ 
...
    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content">
        <TextView
            android:id="@+id/text_view_p1"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Player 1: 0"
            android:textSize="30sp"
            android:freezesText="true"/>
        <TextView
            android:id="@+id/text_view_p2"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_below="@+id/text_view_p1"
            android:text="Player 2: 0"
            android:textSize="30sp"
            android:freezesText="true"/>
        <Button
            android:id="@+id/button_reset"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignParentEnd="true"
            android:layout_centerVertical="true"
            android:layout_marginEnd="33dp"
            android:text="reset" />
    </RelativeLayout>
...
            ]]>
        </programlisting>
        <para>
           A fenti kódcsipetben a "Player 1: 0" és a "Player 2: 0" szövegeket fogjuk megjeleníteni, továbbá lesz egy reset gombunk is. Az egyes elemek szélességét és magasságát a <![CDATA[android:layout_width]]> és a 
           <![CDATA[android:layout_height]]> segítségével tehetünk meg. Például a szövegünk, ami a <![CDATA[TextView]]> tag-ekben találhatóak, a szélessége meg fog egyezni az eszközünk méretével (<![CDATA[match_parent]]>) 
           és a magasság pedig automatikus lesz (<![CDATA[wrap_content]]>). Mivel megadtunk egy szövegméretet is, ezért ezzel megegyező lesz a magasságunk: <![CDATA[android:textSize="30sp"]]>. 
        </para>
        <programlisting language="java"><![CDATA[ 
...
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1">
        <Button
            android:id="@+id/button_00"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:textSize="60sp"
            android:freezesText="true"/>
        <Button
            android:id="@+id/button_01"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:textSize="60sp"
            android:freezesText="true"/>
        <Button
            android:id="@+id/button_02"
            android:layout_width="0dp"
            android:layout_height="match_parent"
            android:layout_weight="1"
            android:textSize="60sp"
            android:freezesText="true"/>
    </LinearLayout>
...
            ]]>
        </programlisting>
        <para>
            <![CDATA[LinearLayout]]> tag-ben adjuk meg a mezőnket. Mivel 3x3-as mátrixot csinálunk, ezért a fájlban három <![CDATA[LinearLayout]]>-ot fogunk létrehozni, amikben 3-3 <![CDATA[Button]]> lesz. 
            Az első <![CDATA[LinearLayout]]> egy sorból és 3 darab teljes magasságú oszlopkból fog állni. Ha hozzáadunk még egy ilyen <![CDATA[LinearLayout]]>-ot, akkor viszont már 2 sor és 3 oszlop lesz látható és így tovább. 
            Ezekez a gombokhoz megadunk egy id-t is, például az eső gombunk id-je: <![CDATA[android:id="@+id/button_00"]]>. Értelemszerűen a következő gombunk <![CDATA[button_01]]> lesz és ügyeljünk rá, hogy ne legyen megegyező 
            azaonosítójuk az egyes gomboknak. 
        </para>
        <mediaobject>
                <imageobject>
                    <imagedata fileref="images/8_2.png" scale="40"/>
                </imageobject>
        </mediaobject>
        </section>
    <section>
        <title>Port scan</title>        
        <para>
            Mutassunk rá ebben a port szkennelő forrásban a kivételkezelés szerepére!
            <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id527287</link>                 
        </para>
        <para>
            Megoldás forrása:  <link xlink:href=" https://github.com/grestemayster/prog2/tree/master/Hallo%2C%20Lauda!/PortScan ">https://github.com/grestemayster/prog2/tree/master/Hallo%2C%20Lauda!/PortScan </link>               
        </para>
        <para>
           A kivételkezelés a szerepe, hogy a program futtatása során hiba esetén megszakítja a programot, majd kidob egy hibaüzenetet. Ha egy metódus eldob egy kivételt, a futtató 
           környezetmegpróbál a kezelésére találni valamit. 3 blokkból állhat: <![CDATA[try, catch]]> és <![CDATA[finally]]> blokkokból. A <![CDATA[try]]> a kivételkezelő első lépésének eszköze. Ide kerül 
           az a kódcsipet, ami hibát dobhat a program futtatása során. A <![CDATA[catch]]> blokkba kerül a hibaüzenet kiíratása, a <![CDATA[finally]]> blokk pedig rendet tesz a programban, tehát például bezárja a 
           nem használt fájlokat, amikre nem lesz már szükségünk. Most pedig nézzük meg a feladatban szereplő kódcsipetet:
        </para> 
        <programlisting language="java"><![CDATA[ 
public class PortScan {
    
    public static void main(String[] args) {
        
        for(int i=0; i<1024; ++i)
            
            try {
                
                java.net.Socket socket = new java.net.Socket(args[0], i);
                
                System.out.println(i + " figyeli");
                
                socket.close();
                
            } catch (Exception e) {
                
                System.out.println(i + " nem figyeli");
                
            }
    } 
}
            ]]>
        </programlisting>
        <para>
            Ez a program annyit csinál, hogy minden 1024 alatti számú gép TCP kapuival megpróbál kapcsolatot létrehozni. Minden egyes kapcsolaton végigmegy és egyesével írja ki, 
            hogy sikerült-e vagy sem. Siker esetén például kiíratjuk, hogy az adott számút figyeli, majd bezárjuk a kapcsolatot, azonban ha nem sikerül a kapcsolat, átlépünk a catch blokkba, 
            ahol azt íratjuk ki, hogy hanyas számú portot nem figyeli a program. 
        </para>
    </section>
    
    <section>
		<title>
		EPAM: Kivételkezelés
		</title>
        <para>
			Ha az input float, akkor egy ChildException-t dob, amit az első catch elkap, hisz a
             ChildException mindig a ChildException egy instance-ja lesz. Azért nem kapja 
             el a parent-exceptiont,
              mert a catch block kidob a finally részig egészen, így a parentet nem tudjuk elkapni.
		</para>

        <para>
			Ha az input string akkor egy ParentExceptiont fog dobni, amit nem más mint a
            második catch fog elkapni, 
            mert a szülő osztály nem instance-ja a child osztálynak, bár ez fordítva igaz,
             de a a cath-ágak sorrendje miatt ez irreleváns itt.
		</para>

		<para>
			Ha az Input NULL, akkor csak egy generikus "Runtime Exceptiont" dob, 
            mert az a parent osztája mind a Parent és Child exceptionoknak,
             azért ugye az instanceof false-t returnöl, így csak a legutolsó catch kapja el.
		</para>
		
		
	</section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
</chapter> 
